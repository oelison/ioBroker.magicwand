{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["/*\n * Created with @iobroker/create-adapter v2.6.2\n */\n\n// The adapter-core module gives you access to the core ioBroker functions\n// you need to create an adapter\nimport * as utils from \"@iobroker/adapter-core\";\nimport * as dgram from \"dgram\";\nconst inSocket = dgram.createSocket(\"udp4\");\n\n// Load your modules here, e.g.:\n// import * as fs from \"fs\";\n\nclass Magicwand extends utils.Adapter {\n    public constructor(options: Partial<utils.AdapterOptions> = {}) {\n        super({\n            ...options,\n            name: \"magicwand\",\n        });\n        this.on(\"ready\", this.onReady.bind(this));\n        this.on(\"stateChange\", this.onStateChange.bind(this));\n        // this.on(\"objectChange\", this.onObjectChange.bind(this));\n        // this.on(\"message\", this.onMessage.bind(this));\n        this.on(\"unload\", this.onUnload.bind(this));\n    }\n\n    /**\n     * Is called when databases are connected and adapter received configuration.\n     */\n    private async onReady(): Promise<void> {\n        this.setObjectNotExists(\"Spell\", {\n            type: \"state\",\n            common: {\n                name: \"Spell\",\n                type: \"string\",\n                role: \"text\",\n                read: true,\n                write: false,\n            },\n            native: {},\n        });\n        this.setObjectNotExists(\"House\", {\n            type: \"state\",\n            common: {\n                name: \"House\",\n                type: \"string\",\n                role: \"text\",\n                read: true,\n                write: false,\n            },\n            native: {},\n        });\n        this.setObjectNotExists(\"Patronus\", {\n            type: \"state\",\n            common: {\n                name: \"Patronus\",\n                type: \"string\",\n                role: \"text\",\n                read: true,\n                write: false,\n            },\n            native: {},\n        });\n        this.setObjectNotExists(\"IP\", {\n            type: \"state\",\n            common: {\n                name: \"IP\",\n                type: \"string\",\n                role: \"text\",\n                read: true,\n                write: false,\n            },\n            native: {},\n        });\n        this.setObjectNotExists(\"FullSpell\", {\n            type: \"state\",\n            common: {\n                name: \"FullSpell\",\n                type: \"string\",\n                role: \"text\",\n                read: true,\n                write: false,\n            },\n            native: {},\n        });\n        this.setObjectNotExists(\"FullSpellIP\", {\n            type: \"state\",\n            common: {\n                name: \"FullSpellIP\",\n                type: \"string\",\n                role: \"text\",\n                read: true,\n                write: false,\n            },\n            native: {},\n        });\n        inSocket.on(\"listening\", () => {\n            const address = inSocket.address();\n            this.log.debug(\"UDP socket listening on \" + address.address + \":\" + address.port);\n        });\n        inSocket.on(\"message\", (message, remote) => {\n            this.log.debug(\"received: \" + message.toString() + \" from ip: \" + remote.address);\n            if (message.toString().startsWith(\"spell:\")) {\n                const fullSpell = message.toString().substring(6);\n                const ipFromSender = remote.address;\n                const fullSpellIP = fullSpell + \":\" + ipFromSender;\n                const dataOnly = fullSpell.split(\":\");\n                if (dataOnly.length == 3) {\n                    const spell = dataOnly[0];\n                    const house = dataOnly[1];\n                    const patronus = dataOnly[2];\n                    this.setState(\"IP\", { val: ipFromSender, ack: true });\n                    this.setState(\"Spell\", { val: spell, ack: true });\n                    this.setState(\"House\", { val: house, ack: true });\n                    this.setState(\"Patronus\", { val: patronus, ack: true });\n                    this.setState(\"FullSpell\", { val: fullSpell, ack: true });\n                    this.setState(\"FullSpellIP\", { val: fullSpellIP, ack: true });\n                } else {\n                    this.log.error(\"Mal formated spell. Muggel tech not able to read that.\");\n                }\n            } else {\n                this.log.debug(\"Not a spell. Muggle tech failure?\");\n            }\n        });\n        inSocket.bind(8888);\n    }\n\n    /**\n     * Is called when adapter shuts down - callback has to be called under any circumstances!\n     */\n    private onUnload(callback: () => void): void {\n        try {\n            inSocket.close();\n\n            callback();\n        } catch (e) {\n            callback();\n        }\n    }\n\n    // If you need to react to object changes, uncomment the following block and the corresponding line in the constructor.\n    // You also need to subscribe to the objects with `this.subscribeObjects`, similar to `this.subscribeStates`.\n    // /**\n    //  * Is called if a subscribed object changes\n    //  */\n    // private onObjectChange(id: string, obj: ioBroker.Object | null | undefined): void {\n    //     if (obj) {\n    //         // The object was changed\n    //         this.log.info(`object ${id} changed: ${JSON.stringify(obj)}`);\n    //     } else {\n    //         // The object was deleted\n    //         this.log.info(`object ${id} deleted`);\n    //     }\n    // }\n\n    /**\n     * Is called if a subscribed state changes\n     */\n    private onStateChange(id: string, state: ioBroker.State | null | undefined): void {\n        if (state) {\n            // The state was changed\n            this.log.info(`state ${id} changed: ${state.val} (ack = ${state.ack})`);\n        } else {\n            // The state was deleted\n            this.log.info(`state ${id} deleted`);\n        }\n    }\n\n    // If you need to accept messages in your adapter, uncomment the following block and the corresponding line in the constructor.\n    // /**\n    //  * Some message was sent to this instance over message box. Used by email, pushover, text2speech, ...\n    //  * Using this method requires \"common.messagebox\" property to be set to true in io-package.json\n    //  */\n    // private onMessage(obj: ioBroker.Message): void {\n    //     if (typeof obj === \"object\" && obj.message) {\n    //         if (obj.command === \"send\") {\n    //             // e.g. send email or pushover or whatever\n    //             this.log.info(\"send command\");\n\n    //             // Send response in callback if required\n    //             if (obj.callback) this.sendTo(obj.from, obj.command, \"Message received\", obj.callback);\n    //         }\n    //     }\n    // }\n}\n\nif (require.main !== module) {\n    // Export the constructor in compact mode\n    module.exports = (options: Partial<utils.AdapterOptions> | undefined) => new Magicwand(options);\n} else {\n    // otherwise start the instance directly\n    (() => new Magicwand())();\n}\n"],
  "mappings": "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",
  "names": []
}
